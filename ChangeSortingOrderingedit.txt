 <br>
<br> Map
Java ProgrammingComparing Objects
Exceptions 
<br>Navigate Aggregate topic: ( v • d • e )
 Collection
 ArrayList
 Map
 Comparing Objects

<br>In Java, we can distinguish two kinds of equality.<br>
<br>Object reference equality: when two object references point to the same object.
Object value equality: when two separate objects happen to have the same values/state.
<br>If two objects are equal in reference, they are equal in value too.<br>
<br>
<br>The == operator can be used to check if two object references point to the same object.<br>
<br>
Code section 5.19: Reference equality.


1 if (objRef1 == objRef2) {
2     // The two object references point to the same object
3 }


<br>
<br>To be able to compare two Java objects of the same class the boolean equals(Object obj) method must be overriden and implemented by the class.<br>
<br>The implementor decides which values must be equal to consider two objects to be equal. For example in the below class, the name and the address must be equal but not the description.<br>
<br>
Code listing 5.5: Customer.java


 1 public class Customer {
 2     private String name;
 3     private String address;
 4     private String description;
 5     // ...
 6     public boolean equals(Object obj) {
 7         if (this == obj) {
 8             return true;
 9         } else if (obj == null) {
10             return false;
11         } else if (obj instanceof Customer) {
12             Customer cust = (Customer) obj;
13             if ((cust.getName() == null && name == null) ||
14                 (cust.getName().equals(name) && ((cust.getAddress() == null && address == null)
15                 || cust.getAddress().equals(address))) {
16                 return true;
17             }
18         }
19         return false;
20     }
21 
22 }


<br>After the equals() method is overriden, two objects from the same class can be compared like this:<br>
<br>
Code section 5.20: Method usage.


1 Customer cust1 = new Customer();
2 Customer cust2 = new Customer();
3 //...
4 if (cust1.equals(cust2)) {
5     // Two Customers are equal, by name and address
6 }


<br>Note that equal objects must have equal hash codes. Therefore, when overriding the equals method, you must also override the hashCode method. Failure to do so violates the general contract for the hashCode method, and any classes that use the hash code, such as HashMap will not function properly.<br>
<br>
<br>In Java, there are several existing methods that already sort objects from any class like Collections.sort(List<T> list). However, Java needs to know the comparison rules between two objects. So when you define a new class and want the objects of your class to be sortable, you have to implement the Comparable and redefine the compareTo(Object obj) method.<br>
<br>int compareTo(T o) 
Compares two objects and return an integer:
<br>A negative integer means that the current object is before the parameter object in the natural ordering.
Zero means that the current object and the parameter object are equal.
A positive integer means that the current object is after the parameter object in the natural ordering.
<br>Let's say that the name is more important than the address and the description is ignored.<br>
<br>
Code listing 5.6: SortableCustomer.java


 1 public class SortableCustomer implements Comparable<SortableCustomer> {
 2     private String name;
 3     private String address;
 4     private String description;
 5     // ...
 6     public int compareTo(SortableCustomer anotherCustomer) {
 7         if (name.compareTo(anotherCustomer.getName()) == 0) {
 8             return address.compareTo(anotherCustomer.getAddress();
 9         } else {
10             return name.compareTo(anotherCustomer.getName();
11         }
12     }
13 
14 }


<br>Objects that implement this interface can be used as keys in a sorted map or elements in a sorted set, without the need to specify a comparator.<br>
<br>The natural ordering for a class C is said to be consistent with equals if and only if e1.compareTo((Object) e2) == 0 has the same boolean value as e1.equals((Object) e2) for every e1 and e2 of class C. Note that null is not an instance of any class, and e.compareTo(null) should throw a NullPointerException even though e.equals(null) returns false.<br>
<br>It is strongly recommended (though not required) that natural orderings be consistent with equals. This is because sorted sets (and sorted maps) without explicit comparators behave "strangely" when they are used with elements (or keys) whose natural ordering is inconsistent with equals. In particular, such a sorted set (or sorted map) violates the general contract for set (or map), which is defined in terms of the equals method.<br>
<br>
<br>Sometimes we may want to change the ordering of a collection of objects from the same class. We may want to order descending or ascending order. We may want to sort by name or by address.<br>
<br>We need to create a class for each way of ordering. It has to implement the Comparator interface.<br>
<br>Since Java 5.0, the Comparator interface is generic; that means when you implement it, you can specify what type of objects your comparator can compare.<br>
<br>
Code listing 5.7: CustomerComparator.java


1 public class CustomerComparator implements Comparator<Customer> {
2     public int compare(Customer cust1, Customer cust2) {
3         return cust1.getName().compareTo(cust2.getName());
4     }
5 }


<br>The above class then can be associated with a SortedSet or other collections that support sorting.<br>
<br>
Code section 5.21: Comparator usage.


1 Collection<Customer> orderedCustomers = new TreeSet<Customer>(new CustomerComparator());


<br>Using the Iterator the orderedCustomers collection can be iterated in order of sorted by name.<br>
<br>A List can be sorted by the Collections' sort method.<br>
<br>
Code section 5.22: Customized comparison.


1 java.util.Collections.sort(custList, new CustomerComparator());


<br>Sorts the specified list according to the order induced by the specified comparator. All elements in the list must be mutually comparable using the specified comparator.<br>
<br>An array of objects can also be sorted with the help of a Comparator.<br>
<br>
Code section 5.23: Array sorting.


1 SortableCustomer[] customerArray;
2 //...
3 java.util.Arrays.sort(customerArray, new CustomerComparator());



<br>Sorts the specified array of Customer objects (customerArray) according to the order induced by the specified comparator. All elements in the array must be mutually comparable by the specified comparator.<br>
<br><br>
<br><br>
<br>



To do:
Add some exercises like the ones in Variables

<br><br>
<br> Map
Java ProgrammingComparing Objects
Exceptions 
<br><br>


<br> 
NewPP limit report
Parsed by mw1303
Cached time: 20171026142149
Cache expiry: 1900800
Dynamic content: false
CPU time usage: 0.156 seconds
Real time usage: 0.213 seconds
Preprocessor visited node count: 604/1000000
Preprocessor generated node count: 0/1500000
Post‐expand include size: 11749/2097152 bytes
Template argument size: 1602/2097152 bytes
Highest expansion depth: 11/40
Expensive parser function count: 48/500
Lua time usage: 0.092/10.000 seconds
Lua memory usage: 778 KB/50 MB
<br>
<br>
Transclusion expansion time report (%,ms,calls,template)
100.00%  175.922      1 -total
 77.75%  136.783      2 Template:Programming/Navigation
  8.20%   14.428      1 Template:Java_Programming/CollectionsTopic/Nav
  4.61%    8.103      3 Template:BookCat
  3.29%    5.780      3 Template:BookCat/default
  3.00%    5.272      1 Template:Java_Programming/Aggregate/Topic
  2.88%    5.069      1 Template:Navbar
  2.67%    4.691      5 Template:XExample
  2.51%    4.409      1 Template:Status
  2.07%    3.638      3 Template:XCode
<br>
<br>