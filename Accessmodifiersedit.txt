 <br>
<br> Object Lifecycle
Java ProgrammingScope
Nested Classes 
<br>Navigate Classes and Objects topic: ( v • d • e )
 Defining classes
 Inheritance
 Interfaces
 Overloading methods and constructors
 Object Lifecycle
 Scope
 Nested classes
 Generics

<br><br>
<br>
<br>The scope of a class, a variable or a method is its visibility and its accessibility. The visibility or accessibility means that you can use the item from a given place.<br>
<br>Scope of method parameters[edit]<br>
<br>A method parameter is visible inside of the entire method but not visible outside the method.<br>
<br>
Code listing 3.14: Scope.java


 1 public class Scope {
 2 
 3     public void method1(int i) {
 4         i = i++;
 5         method2();
 6         int j = i * 2;
 7     }
 8 
 9     public void method2() {
10         int k = 20;
11     }
12 
13     public static void main(String[] args) {
14         method1(10);
15     }
16 }


<br>In code listing 3.14, i is visible within the entire method1 method but not in the method2 and the main methods.<br>
<br>Scope of local variables[edit]<br>
<br>A local variable is visible after its declaration until the end of the block in which the local variable has been created.<br>
<br>
Code section 3.50: Local variables.


 1 {
 2 ...
 3      // myNumber is NOT visible
 4   {
 5      // myNumber is NOT visible
 6      int myNumber;
 7      // myNumber is visible
 8     {
 9       ...
10        // myNumber is visible
11     }
12        // myNumber is visible
13   }
14      // myNumber is NOT visible
15 ...
16 }


<br>
<br>You surely would have noticed by now, the words public, protected and private at the beginning of class's method declarations used in this book. These keywords are called the access modifiers in the Java language syntax, and they define the scope of a given item.<br>
<br>For a class[edit]<br>
<br>If a class has public visibility, the class can be referenced by anywhere in the program.
If a class has package visibility, the class can be referenced only in the package where the class is defined.
If a class has private visibility, (it can happen only if the class is defined nested in an other class) the class can be accessed only in the outer class.
<br>For a variable[edit]<br>
<br>If a variable is defined in a public class and it has public visibility, the variable can be referenced anywhere in the application through the class it is defined in.
If a variable has protected visibility, the variable can be referenced only in the sub-classes and in the same package through the class it is defined in.
If a variable has package visibility, the variable can be referenced only in the same package through the class it is defined in.
If a variable has private visibility, the variable can be accessed only in the class it is defined in.
<br>For a method[edit]<br>
<br>If a method is defined in a public class and it has public visibility, the method can be called anywhere in the application through the class it is defined in.
If a method has protected visibility, the method can be called only in the sub-classes and in the same package through the class it is defined in.
If a method has package visibility, the method can be called only in the same package through the class it is defined in.
If a method has private visibility, the method can be called only in the class it is defined in.
<br>For an interface[edit]<br>
<br>The interface methods and interfaces are always public. You do not need to specify the access modifier. It will default to public. For clarity it is considered a good practice to put the public keyword.<br>
<br>The same way all member variables defined in the Interface by default will become static final once inherited in a class.<br>
<br>Summary[edit]<br>
<br>
Class
Nested class
Method, or Member variable
Interface
Interface method signature
public
visible from anywhere
same as its class
same as its class
visible from anywhere
visible from anywhere
protected
N/A
its class and its subclass
its class and its subclass, and from its package
N/A
N/A
package
only from its package
only from its package
only from its package
N/A
N/A
private
N/A
only from its class
only from its class
N/A
N/A
<br>The cases in bold are the default.<br>
<br>