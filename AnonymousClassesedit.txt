 <br>
<br> Scope
Java ProgrammingNested Classes
Generics 
<br>Navigate Classes and Objects topic: ( v • d • e )
 Defining classes
 Inheritance
 Interfaces
 Overloading methods and constructors
 Object Lifecycle
 Scope
 Nested classes
 Generics

<br>
In Java you can define a class inside an other class. A class can be nested inside another class or inside a method. A class that is not nested is called a top-level class and a class defining a nested class is an outer class.<br>
<br>
<br>Nesting a class inside a class[edit]<br>
<br>When a class is declared inside another class, the nested class' access modifier can be public, private, protected or package(default).<br>
<br>
Code listing 4.10: OuterClass.java


1 public class OuterClass {
2    private String outerInstanceVar;
3 
4    public class InnerClass {
5       public void printVars() {
6          System.out.println("Print Outer Class Instance Var.:" + outerInstanceVar);
7       }
8    }
9 }


<br>The inner class has access to the enclosing class instance's variables and methods, even private ones, as seen above. This makes it very different from the nested class in C++, which are equivalent to the "static" inner classes, see below.<br>
<br>An inner object has a reference to the outer object. In other words, all inner objects are tied to the outer object. The inner object can only be created through a reference to the 'outer' object. See below.<br>
<br>
Code section 4.20: Outer class call.


1 public void testInner() {
2     ...
3     OuterClass outer = new OuterClass();
4     OuterClass.InnerClass inner = outer.new InnerClass();  
5     ...
6 }


<br>Note that inner objects, because they are tied to the outer object, cannot contain static variables or methods.<br>
<br>When in a non-static method of the outer class, you can directly use new InnerClass(), since the class instance is implied to be this.<br>
<br>You can directly access the reference to the outer object from within an inner class with the syntax OuterClass.this; although this is usually unnecessary because you already have access to its fields and methods.<br>
<br>Inner classes compile to separate ".class" bytecode files, with the name of the enclosing class, followed by a "$", followed by the name of the inner class. So for example, the above inner class would be compiled to a file named "OuterClass$InnerClass.class".<br>
<br>Static nested classes[edit]<br>
<br>A nested class can be declared static. These classes are not bound to an instance of the outer defining class. A static nested class has no enclosing instance, and therefore cannot access instance variables and methods of the outer class. You do not specify an instance when creating a static inner class. This is equivalent to the inner classes in C++.<br>
<br>Nesting a class inside a method[edit]<br>
<br>These inner classes, also called local classes, cannot have access modifiers, like local variables, since the class is 'private' to the method. The inner class can be only abstract or final.<br>
<br>
Code listing 4.11: OuterClass.java


1 public class OuterClass {
2    public void method() {
3       class InnerClass {
4  
5       }
6    }
7 }


<br>In addition to instance variables of the enclosing class, local classes can also access local variables of the enclosing method, but only ones that are declared final. This is because the local class instance might outlive the invocation of the method, and so needs its own copy of the variable. To avoid problems with having two different copies of a mutable variable with the same name in the same scope, it is required to be final, so it cannot be changed.<br>
<br>
<br>In Java, a class definition and its instantiation can be combined into a single step. By doing that the class does not require a name. Those classes are called anonymous classes. An anonymous class can be defined and instantiated in contexts where a reference can be used, and it is a nested class to an existing class. Anonymous class is a special case of a class local to a method; hence they also can access final local variables of the enclosing method.<br>
<br>Anonymous classes are most useful to create an instance of an interface or adapter class without needing a brand new class.<br>
<br>
Code listing 4.12: ActionListener.java


1 public interface ActionListener {
2     public void actionPerformed();
3 }


<br>
Code section 4.21: Anonymous class.


1 ActionListener listener = new ActionListener() {
2         public void actionPerformed() {
3             // Implementation of the action event
4             ...
5             return;
6         }
7     };


<br>In the above example the class that implements the ActionListener is anonymous. The class is defined where it is instantiated.<br>
<br>The above code is harder to read than if the class is explicitly defined, so why use it? If many implementations are needed for an interface, those classes are used only in one particular place, and it would be hard to come up with names for them, using an anonymous inner class makes sense.<br>
<br>The following example uses an anonymous inner class to implement an action listener.<br>
<br>
Code listing 4.13: MyApp.java


 1 import java.awt.Button;
 2 import java.awt.event.ActionEvent;
 3 import java.awt.event.ActionListener;
 4 
 5 class MyApp {
 6    Button aButton = new Button();
 7 
 8    MyApp() {
 9        aButton.addActionListener(new ActionListener() {
10                public void actionPerformed(ActionEvent e) {
11                    System.out.println("Hello There");
12                }
13            }
14        );
15    }
16 }


<br>The following example does the same thing, but it names the class that implements the action listener.<br>
<br>
Code listing 4.14: MyApp.java


 1 import java.awt.Button;
 2 import java.awt.event.ActionEvent;
 3 import java.awt.event.ActionListener;
 4 
 5 class MyApp {
 6    Button aButton = new Button();
 7 
 8    // Nested class to implement the action listener
 9    class MyActionListener implements ActionListener {
10        public void actionPerformed(ActionEvent e) {
11            System.out.println("Hello There");
12        }
13    }
14    MyApp() {
15        aButton.addActionListener(new MyActionListener());
16    }
17 }


<br>Using anonymous classes is especially preferable when you intend to use many different classes that each implement the same interface.<br>
<br><br>
<br> Scope
Java ProgrammingNested Classes
Generics 
<br><br>


<br> 
NewPP limit report
Parsed by mw1311
Cached time: 20171026141006
Cache expiry: 1900800
Dynamic content: false
CPU time usage: 0.184 seconds
Real time usage: 0.229 seconds
Preprocessor visited node count: 768/1000000
Preprocessor generated node count: 0/1500000
Post‐expand include size: 14228/2097152 bytes
Template argument size: 1727/2097152 bytes
Highest expansion depth: 11/40
Expensive parser function count: 42/500
Lua time usage: 0.079/10.000 seconds
Lua memory usage: 778 KB/50 MB
<br>
<br>
Transclusion expansion time report (%,ms,calls,template)
100.00%  180.232      1 -total
 69.63%  125.490      2 Template:Programming/Navigation
 11.73%   21.135      5 Template:XCode
  6.52%   11.743      1 Template:Java_Programming/ClassesAndObjectsTopic/Nav
  3.71%    6.679      3 Template:BookCat
  3.70%    6.673      1 Template:Status
  3.21%    5.787      1 Template:Java_Programming/ClassesAndObjects/Topic
  2.77%    4.990      3 Template:BookCat/default
  2.42%    4.360      1 Template:Navbar
  1.78%    3.208      3 Template:BOOKCATEGORY
<br>
<br>