 <br>
<br> Overloading Methods and Constructors
Java ProgrammingObject Lifecycle
Scope 
<br>Navigate Classes and Objects topic: ( v • d • e )
 Defining classes
 Inheritance
 Interfaces
 Overloading methods and constructors
 Object Lifecycle
 Scope
 Nested classes
 Generics

<br>Before a Java object can be created the class byte code must be loaded from the file system (with .class extension) to memory. This process of locating the byte code for a given class name and converting that code into a Java class instance is known as class loading. There is one class created for each type of Java class.<br>
<br>All objects in Java programs are created on heap memory. An object is created based on its class. You can consider a class as a blueprint, template, or a description how to create an object. When an object is created, memory is allocated to hold the object properties. An object reference pointing to that memory location is also created. To use the object in the future, that object reference has to be stored as a local variable or as an object member variable.<br>
<br>The Java Virtual Machine (JVM) keeps track of the usage of object references. If there are no more reference to the object, the object can not be used any more and becomes garbage. After a while the heap memory will be full of unused objects. The JVM collects those garbage objects and frees the memory they allocated, so the memory can be reused again when a new object is created. See below a simple example:<br>
<br>
Code section 4.30: Object creation.


1 {
2   // Create an object
3   MyObject obj = new MyObject();
4 
5   // Use the object
6   obj.printMyValues();
7 }


<br>The obj variable contains the object reference pointing to an object created from the MyObject class. The obj object reference is in scope inside the { }. After the } the object becomes garbage. Object references can be passed in to methods and can be returned from methods.<br>
<br>
<br>99% of new objects are created using the new keyword.<br>
<br>
Code listing 4.13: MyProgram.java


1 public class MyProgram {
2 
3   public static void main(String[] args) {
4     // Create an 'MyObject' for the first time the application started
5     MyObject obj = new MyObject();
6   }
7 }


<br>When an object from the MyObject class is created for the first time, the JVM searches the file system for the definition of the class, that is the Java byte code. The file has the extension of *.class. The CLASSPATH environment variable contains locations where Java classes are stored. The JVM is looking for the MyObject.class file. Depending on which package the class belongs to, the package name will be translated to a directory path.<br>
<br>When the MyObject.class file is found, the JVM's class loader loads the class in memory, and creates a java.lang.Class object. The JVM stores the code in memory, allocates memory for the static variables, and executes any static initialize block. Memory is not allocated for the object member variables at this point, memory will be allocated for them when an instance of the class, an object, is created.<br>
<br>There is no limit on how many objects from the same class can be created. Code and static variables are stored only once, no matter how many objects are created. Memory is allocated for the object member variables when the object is created. Thus, the size of an object is determined not by its code's size but by the memory it needs for its member variables to be stored.<br>
<br>
<br>Cloning is not automatically available to classes. There is some help though, as all Java objects inherit the protected Object clone() method. This base method would allocate the memory and do the bit by bit copying of the object's states.<br>
<br>You may ask why we need this clone method. Can't we create a constructor, pass in the same object and do the copying variable by variable? An example would be (note that accessing the private memberVar variable of obj is legal as this is in the same class):<br>
<br>
Code listing 4.14: MyObject.java


1 public class MyObject {
2    private int memberVar;
3 ...
4    MyObject(MyObject obj) {
5       this.memberVar = obj.memberVar;
6     ...
7    }
8 ...
9 }


<br>This method works but object creation with the new keyword is time-consuming. The clone() method copies the whole object's memory in one operation and this is much faster than using the new keyword and copying each variable so if you need to create lots of objects with the same type, performance will be better if you create one object and clone new ones from it. See below a factory method that will return a new object using cloning.<br>
<br>
Code section 4.31: Object cloning.


 1 HashTable cacheTemplate = new HashTable();
 2 ...
 3 /** Clone Customer object for performance reason */
 4 public Customer createCustomerObject() {
 5    // See if a template object exists in our cache
 6    Customer template = cacheTemplate.get("Customer");
 7    if (template == null) {
 8       // Create template
 9       template = new Customer();
10       cacheTemplate.put("Customer", template);
11    }
12    return template.clone();
13 }


<br>Now, let's see how to make the Customer object cloneable.<br>
<br>First the Customer class needs to implement the Cloneable Interface.
Override and make the clone() method public, as that is protected in the Object class.
Call the super.clone()method at the beginning of your clone method.
Override the clone() method in all the subclasses of Customer.
<br>
Code listing 4.15: Customer.java


1 public class Customer implements Cloneable {
2  ...
3     public Object clone() throws CloneNotSupportedException {
4        Object obj = super.clone();
5 
6        return obj;
7     }
8 }


<br>In the code listing 4.15 we used cloning for speed up object creation. Another use of cloning could be to take a snapshot of an object that can change in time. Let's say we want to store Customer objects in a collection, but we want to disassociate them from the 'live' objects. So before adding the object, we clone them, so if the original object changes from that point forward, the added object won't. Also let's say that the Customer object has a reference to an Activity object that contains the customer activities. Now we are facing a problem, it is not enough to clone the Customer object, we also need to clone the referenced objects. The solution:<br>
<br>Make the Activity class also cloneable
Make sure that if the Activity class has other 'changeable' object references, those have to be cloned as well, as seen below
Change the Customer class clone() method as follows:
<br>
Code listing 4.16: Customer.java


 1 public class Customer implements Cloneable {
 2   Activity activity;
 3   ...
 4     public Customer clone() throws CloneNotSupportedException {
 5       Customer clonedCustomer = (Customer) super.clone();
 6 
 7       // Clone the object referenced objects
 8       if (activity != null) {
 9          clonedCustomer.setActivity((Activity) activity.clone());
10       }
11       return clonedCustomer;
12    }
13 }


<br>Note that only mutable objects need to be cloned. References to unchangeable objects such as a String can be used in the cloned object without worry.<br>
<br>