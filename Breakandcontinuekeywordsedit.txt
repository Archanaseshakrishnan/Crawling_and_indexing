 <br>
<br> Conditional blocks
Java ProgrammingLoop blocks
Boolean expressions 
<br>Navigate Language Fundamentals topic: ( v • d • e )
 Statements
 Conditional blocks
 Loop blocks
 Boolean expressions
 Variables
 Primitive Types
 Arithmetic expressions
 Literals
 Methods
 String
 Objects
 Packages
 Arrays
 Mathematical functions
 Large numbers
 Random numbers
 Unicode
 Comments
 Keywords
 Coding conventions

<br>
Loops are a handy tool that enables programmers to do repetitive tasks with minimal effort. Say we want a program that can count from 1 to 10, we could write the following program.<br>
<br>

Code listing 3.4: Count.java


 1 class Count {
 2     public static void main(String[] args) {
 3         System.out.println("1 ");
 4         System.out.println("2 ");
 5         System.out.println("3 ");
 6         System.out.println("4 ");
 7         System.out.println("5 ");
 8         System.out.println("6 ");
 9         System.out.println("7 ");
10         System.out.println("8 ");
11         System.out.println("9 ";
12         System.out.println("10 ");
13     }
14 }





Output for code listing 3.4

1
2
3
4
5
6
7
8
9
10


<br>
The task will be completed just fine, the numbers 1 to 10 will be printed in the output, but there are a few problems with this solution:<br>
<br>Flexibility: what if we wanted to change the start number or end number? We would have to go through and change them, adding extra lines of code where they're needed.
Scalability: 10 repeats are trivial, but what if we wanted 100 or even 1000 repeats? The number of lines of code needed would be overwhelming for a large number of iterations.
Maintenance: where there is a large amount of code, one is more likely to make a mistake.
Feature: the number of tasks is fixed and doesn't change at each execution.
<br>Using loops we can solve all these problems. Once you get you head around them they will be invaluable to solving many problems in programming.<br>
<br>Open up your editing program and create a new file saved as Loop.java. Now type or copy the following code:<br>
<br>

Code listing 3.5: Loop.java


1 class Loop {
2     public static void main(String[] args) {
3         int i;
4         for (i = 1; i <= 10; i++) {
5             System.out.println(i + " ");
6         }
7     }
8 }





Output for code listing 3.5

1
2
3
4
5
6
7
8
9
10


<br>If we run the program, the same result is produced, but looking at the code, we immediately see the advantages of loops. Instead of executing 10 different lines of code, line 5 executes ten times. 10 lines of code have been reduced to just 4. Furthermore, we may change the number 10 to any number we like. Try it yourself, replace the 10 with your own number.<br>
<br>While[edit]<br>
<br>while loops are the simplest form of loop. The while loop repeats a block of code while the specified condition is true. Here is the structure of a while loop:<br>
<br>while (boolean expression1) {
statement1
statement2
...
statementn
}

<br>The loop's condition is checked before each iteration of the loop. If the condition is false at the start of the loop, the loop will not be executed at all. The code section 3.28 sets in squareHigherThan200 the smallest integer whose square exceeds 200.<br>
<br>
Code section 3.28: The smallest integer whose square exceeds 200.


1 int squareHigherThan200 = 0;
2 
3 while (squareHigherThan200 * squareHigherThan200 < 200) {
4   squareHigherThan200 = squareHigherThan200 + 1;
5 }


<br>
If a loop's condition will never become false, such as if the true constant is used for the condition, said loop is known as an infinite loop. Such a loop will repeat indefinitely unless it is broken out of. Infinite loops can be used to perform tasks that need to be repeated over and over again without a definite stopping point, such as updating a graphics display.
<br>Do... while[edit]<br>
<br>The do-while loop is functionally similar to the while loop, except the condition is evaluated AFTER the statement executes It is useful when we try to find a data that does the job by randomly browsing an amount of data.<br>
<br>do {
statement1
statement2
...
statementn
} while (boolean expression1);

<br>For[edit]<br>
<br>The for loop is a specialized while loop whose syntax is designed for easy iteration through a sequence of numbers. It consists of the keyword for followed by three extra statements enclosed in parentheses. The first statement is the variable declaration statement, which allows you to declare one or more integer variables. The second is the condition, which is checked the same way as the while loop. Last is the iteration statement, which is used to increment or decrement variables, though any statement is allowed.<br>
<br>This is the structure of a for loop:<br>
<br>for (variable declarations; condition; iteration statement) {
statement1
statement2
...
statementn
}

<br>To clarify how a for loop is used, here is an example:<br>
<br>

Code section 3.29: A for loop.


1 for (int i = 1; i <= 10; i++) {
2     System.out.println(i);
3 }





Output for code listing 3.29

1
2
3
4
5
6
7
8
9
10


<br>The for loop is like a template version of the while loop. The alternative code using a while loop would be as follows:<br>
<br>
Code section 3.30: An iteration using a while loop.


1 int i = 1;
2 while (i <= 10) {
3   System.out.println(i);
4   i++;
5 }


<br>The code section 3.31 shows how to iterate with the for loop using multiple variables and the code section 3.32 shows how any of the parameters of a for loop can be skipped. Skip them all, and you have an infinitely repeating loop.<br>
<br>

Code section 3.31: The for loop using multiple variables.


1 for (int i = 1, j = 10; i <= 10; i++, j--) {
2   System.out.print(i + " ");
3   System.out.println(j);
4 }





Code section 3.32: The for loop without parameter.


1 for (;;) {
2   // Some code
3 }



<br>For-each[edit]<br>
<br>Arrays haven't been covered yet, but you'll want to know how to use the enhanced for loop, called the for-each loop. The for-each loop automatically iterates through a list or array and assigns the value of each index to a variable.<br>
<br>To understand the structure of a for-each loop, look at the following example:<br>
<br>

Code section 3.33: A for-each loop.


1 String[] sentence = {"I", "am", "a", "Java", "program."};
2 for (String word : sentence) {
3     System.out.print(word + " ");
4 }





Output for code section 3.33

I am a Java program.


<br>The example iterates through an array of words and prints them out like a sentence. What the loop does is iterate through sentence and assign the value of each index to word, then execute the code block.<br>
<br>Here is the general contract of the for-each loop:<br>
<br>for (variable declaration : array or list) {
statement1
statement2
...
statementn
}

<br>Make sure that the type of the array or list is assignable to the declared variable, or you will get a compilation error. Notice that the loop automatically exits after the last item in the collection has been examined in the statement block.<br>
<br>Although the enhanced for loop can make code much clearer, it can't be used in some common situations.<br>
<br>Only access. Elements can not be assigned to, eg, not to increment each element in a collection.
Only single structure. It's not possible to traverse two structures at once, eg, to compare two arrays.
Only single element. Use only for single element access, eg, not to compare successive elements.
Only forward. It's possible to iterate only forward by single steps.
At least Java 5. Don't use it if you need compatibility with versions before Java 5.
<br>
<br>The break keyword exits a flow control loop, such as a for loop. It basically breaks the loop.<br>
<br>In the code section 3.34, the loop would print out all the numbers from 1 to 10, but we have a check for when i equals 5. When the loop reaches its fifth iteration, it will be cut short by the break statement, at which point it will exit the loop.<br>
<br>

Code section 3.34: An interrupted for loop.


1 for (int i = 1; i <= 10; i++) {
2     System.out.println(i);
3     if (i == 5) {
4        System.out.println("STOP!");
5        break;
6     }
7 }





Output for code section 3.34

1
2
3
4
5
STOP!


<br>The continue keyword jumps straight to the next iteration of a loop and evaluates the boolean expression controlling the loop. The code section 3.35 is an example of the continue statement in action:<br>
<br>

Code section 3.35: A for loop with a skipped iteration.


1 for (int i = 1; i <= 10; i++) {
2     if (i == 5) {
3         System.out.println("Caught i == 5");
4         continue;
5     }
6     System.out.println(i);
7 }





Output for code section 3.35

1
2
3
4
Caught i == 5
6
7
8
9
10


<br>As the break and continue statements reduce the readability of the code, it is recommended to reduce their use or replace them with the use of if and while blocks. Some IDE refactoring operations will fail because of such statements.<br>
<br>
Test your knowledge

Question 3.2: Consider the following code:

Question 3.2: Loops and conditions.


 1 int numberOfItems = 5;
 2 int currentItems = 0;
 3 int currentCandidate = 1;
 4 
 5 while (currentItems < numberOfItems) {
 6   currentCandidate = currentCandidate + 1;
 7   System.out.println("Test with integer: " + currentCandidate);
 8  
 9   boolean found = true;
10   for (int i = currentCandidate - 1; i > 1; i--) {
11    
12     // Test if i is a divisor of currentCandidate
13     if ((currentCandidate % i) == 0) {
14       System.out.println("Not matching...");
15       found = false;
16       break;
17     }
18    
19   }
20  
21   if (found) {
22     System.out.println("Matching!");
23     currentItems = currentItems + 1;
24   }
25 }
26 
27 System.out.println("Find the value: " + currentCandidate);


What will be printed in the standard output?

Answer


Output for Question 3.2

Test with integer: 2
Matching!
Test with integer: 3
Matching!
Test with integer: 4
Not matching...
Test with integer: 5
Matching!
Test with integer: 6
Not matching...
Test with integer: 7
Matching!
Test with integer: 8
Not matching...
Test with integer: 9
Not matching...
Test with integer: 10
Not matching...
Test with integer: 11
Matching!
Find the value: 11

The snippet is searching the 5thprime number, that is to say: 11. It iterates on each positive integer from 2 (2, 3, 4, 5, 6, 7, 8, 9, 10, 11...), among them, it counts the prime numbers (2, 3, 5, 7, 11) and it stops at the 5th one.
So the snippet first iterates on each positive integer from 2 using the while loop:

Answer 3.2.1: while loop.


 1 int numberOfItems = 5;
 2 int currentItems = 0;
 3 int currentCandidate = 1;
 4 
 5 while (currentItems < numberOfItems) {
 6   currentCandidate = currentCandidate + 1;
 7   System.out.println("Test with integer: " + currentCandidate);
 8  
 9   boolean found = true;
10   for (int i = currentCandidate - 1; i > 1; i--) {
11    
12     // Test if i is a divisor of currentCandidate
13     if ((currentCandidate % i) == 0) {
14       System.out.println("Not matching...");
15       found = false;
16       break;
17     }
18    
19   }
20  
21   if (found) {
22     System.out.println("Matching!");
23     currentItems = currentItems + 1;
24   }
25 }
26 
27 System.out.println("Find the value: " + currentCandidate);


For each iteration, the current number is either a prime number or not. If it is a prime number, the code at the left will be executed. If it is not a prime number, the code at the right will be executed.


Answer 3.2.2: A prime number.


 1 int numberOfItems = 5;
 2 int currentItems = 0;
 3 int currentCandidate = 1;
 4 
 5 while (currentItems < numberOfItems) {
 6   currentCandidate = currentCandidate + 1;
 7   System.out.println("Test with integer: " + currentCandidate);
 8  
 9   boolean found = true;
10   for (int i = currentCandidate - 1; i > 1; i--) {
11    
12     // Test if i is a divisor of currentCandidate
13     if ((currentCandidate % i) == 0) {
14       System.out.println("Not matching...");
15       found = false;
16       break;
17     }
18    
19   }
20  
21   if (found) {
22     System.out.println("Matching!");
23     currentItems = currentItems + 1;
24   }
25 }
26 
27 System.out.println("Find the value: " + currentCandidate);





Answer 3.2.3: Not a prime number.


 1 int numberOfItems = 5;
 2 int currentItems = 0;
 3 int currentCandidate = 1;
 4 
 5 while (currentItems < numberOfItems) {
 6   currentCandidate = currentCandidate + 1;
 7   System.out.println("Test with integer: " + currentCandidate);
 8  
 9   boolean found = true;
10   for (int i = currentCandidate - 1; i > 1; i--) {
11    
12     // Test if i is a divisor of currentCandidate
13     if ((currentCandidate % i) == 0) {
14       System.out.println("Not matching...");
15       found = false;
16       break;
17     }
18    
19   }
20  
21   if (found) {
22     System.out.println("Matching!");
23     currentItems = currentItems + 1;
24   }
25 }
26 
27 System.out.println("Find the value: " + currentCandidate);



The prime numbers are counted using currentItems. When currentItems is equal to numberOfItems (5), the program go out of the while loop. currentCandidate contains the last number, that is to say the 5th prime number:

Answer 3.2.4: End of the program.


 1 int numberOfItems = 5;
 2 int currentItems = 0;
 3 int currentCandidate = 1;
 4 
 5 while (currentItems < numberOfItems) {
 6   currentCandidate = currentCandidate + 1;
 7   System.out.println("Test with integer: " + currentCandidate);
 8  
 9   boolean found = true;
10   for (int i = currentCandidate - 1; i > 1; i--) {
11    
12     // Test if i is a divisor of currentCandidate
13     if ((currentCandidate % i) == 0) {
14       System.out.println("Not matching...");
15       found = false;
16       break;
17     }
18    
19   }
20  
21   if (found) {
22     System.out.println("Matching!");
23     currentItems = currentItems + 1;
24   }
25 }
26 
27 System.out.println("Find the value: " + currentCandidate);






<br>
<br>