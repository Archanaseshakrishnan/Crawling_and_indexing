 <br>
<br> Loop blocks
Java ProgrammingBoolean expressions
Variables 
<br>Navigate Language Fundamentals topic: ( v • d • e )
 Statements
 Conditional blocks
 Loop blocks
 Boolean expressions
 Variables
 Primitive Types
 Arithmetic expressions
 Literals
 Methods
 String
 Objects
 Packages
 Arrays
 Mathematical functions
 Large numbers
 Random numbers
 Unicode
 Comments
 Keywords
 Coding conventions

<br>
Boolean values are values that evaluate to either true or false, and are represented by the boolean data type. Boolean expressions are very similar to mathematical expressions, but instead of using mathematical operators such as "+" or "-", you use comparative or boolean operators such as "==" or "!".<br>
<br>
<br>Java has several operators that can be used to compare variables. For example, how would you tell if one variable has a greater value than another? The answer: use the "greater-than" operator.<br>
<br>Here is a list of the comparative operators in Java:<br>
<br>> : Greater than
< : Less than
>= : Greater than or equal to
<= : Less than or equal to
== : Equal to
!= : Not equal to
<br>To see how these operators are used, look at this example:<br>
<br>

Code section 3.37: Comparisons.


1 int a = 5, b = 3;
2 System.out.println(a > b); // Value is true because a is greater than b
3 System.out.println(a == b); // Value is false because a does not equal b
4 System.out.println(a != b); // Value is true because a does not equal b
5 System.out.println(b <= a); // Value is true because b is less than a





Output for code section 3.37

true
false
true
true


<br>Comparative operators can be used on any primitive types (except boolean), but only the "equals" and "does not equal" operators work on objects. This is because the less-than/greater-than operators cannot be applied to objects, but the equivalency operators can.<br>
<br>
Specifically, the == and != operators test whether both variables point to the same object. Objects will be covered later in the tutorial, in the "Classes, Objects, and Types" module.
<br>
<br>The Java boolean operators are based on the operations of the boolean algebra. The boolean operators operate directly on boolean values.<br>
<br>Here is a list of four common boolean operators in Java:<br>
<br>! : Boolean NOT
&& : Boolean AND
|| : Boolean inclusive OR
^ : Boolean exclusive XOR
<br>The boolean NOT operator ("!") inverts the value of a boolean expression. The boolean AND operator ("&&") will result in true if and only if the values on both sides of the operator are true. The boolean inclusive OR operator ("||") will result in true if either or both of the values on the sides of the operator is true. The boolean exclusive XOR operator ("^") will result in true if one and only of the values on the sides of the operator is true.<br>
<br>To show how these operators are used, here is an example:<br>
<br>

Code section 3.38: Operands.


 1 boolean iMTrue = true;
 2 boolean iMTrueToo = true;
 3 boolean iMFalse = false;
 4 boolean iMFalseToo = false;
 5 
 6 System.out.println("NOT operand:");
 7 System.out.println(!iMTrue);
 8 System.out.println(!iMFalse);
 9 System.out.println(!(4 < 5));
10 System.out.println("AND operand:");
11 System.out.println(iMTrue && iMTrueToo);
12 System.out.println(iMFalse && iMFalseToo);
13 System.out.println(iMTrue && iMFalse);
14 System.out.println(iMTrue && !iMFalse);
15 System.out.println("OR operand:");
16 System.out.println(iMTrue || iMTrueToo);
17 System.out.println(iMFalse || iMFalseToo);
18 System.out.println(iMTrue || iMFalse);
19 System.out.println(iMFalse || !iMTrue);
20 System.out.println("XOR operand:");
21 System.out.println(iMTrue ^ iMTrueToo);
22 System.out.println(iMFalse ^ iMFalseToo);
23 System.out.println(iMTrue ^ iMFalse);
24 System.out.println(iMFalse ^ !iMTrue);





Output for code section 3.38

NOT operand:
false
true
false
AND operand:
true
false
false
true
OR operand:
true
false
true
false
XOR operand:
false
false
true
false


<br>Here are the truth tables for the boolean operators:<br>
<br>a
!a
true
false
false
true
<br>a
b
a && b
a || b
a ^ b
true
true
true
true
false
true
false
false
true
true
false
true
false
true
true
false
false
false
false
false
<br>For help on simplifying complex logic, see De Morgan's laws.
<br>In Java, boolean logic has a useful property called short circuiting. This means that expressions will only be evaluated as far as necessary. In the expression (a && b), if a is false, then b will not be evaluated because the expression will be false no matter what. Here is an example that shows that the second expression is not automatically checked:<br>
<br>

Code section 3.39: Short circuiting.


1 System.out.println((4 < 5) || ((10 / 0) == 2));





Output for code section 3.39

true


<br>To disable this property, you can use & instead of && and | instead of || but it's not recommended.<br>
<br>For the bitwise operations on & and |, see Arithmetic expressions.
<br><br>
<br> Loop blocks
Java ProgrammingBoolean expressions
Variables 
<br><br>


<br> 
NewPP limit report
Parsed by mw1301
Cached time: 20171026140026
Cache expiry: 1900800
Dynamic content: false
CPU time usage: 0.128 seconds
Real time usage: 0.171 seconds
Preprocessor visited node count: 1230/1000000
Preprocessor generated node count: 0/1500000
Post‐expand include size: 19862/2097152 bytes
Template argument size: 2158/2097152 bytes
Highest expansion depth: 11/40
Expensive parser function count: 18/500
Lua time usage: 0.065/10.000 seconds
Lua memory usage: 704 KB/50 MB
<br>
<br>
Transclusion expansion time report (%,ms,calls,template)
100.00%  129.863      1 -total
 74.27%   96.449      2 Template:Programming/Navigation
 12.92%   16.784      1 Template:Java_Programming/LanguageFundamentalsTopic/Nav
  7.35%    9.545      3 Template:BookCat
  6.92%    8.991      1 Template:Java_Programming/LanguageFundamentals/Topic
  5.39%    7.001      3 Template:BookCat/default
  4.49%    5.836     20 Template:Stage_short
  3.83%    4.975      1 Template:Navbar
  2.56%    3.324      1 Template:Status
  2.19%    2.847      3 Template:XExample
<br>
<br>