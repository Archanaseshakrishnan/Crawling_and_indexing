 <br>
<br> Interfaces
Java ProgrammingOverloading Methods and Constructors
Object Lifecycle 
<br>Navigate Classes and Objects topic: ( v • d • e )
 Defining classes
 Inheritance
 Interfaces
 Overloading methods and constructors
 Object Lifecycle
 Scope
 Nested classes
 Generics

<br>
<br>In a class, there can be several methods with the same name. However they must have a different signature. The signature of a method is comprised of its name, its parameter types and the order of its parameters. The signature of a method is not comprised of its return type nor its visibility nor the exceptions it may throw. The practice of defining two or more methods within the same class that share the same name but have different parameters is called overloading methods.<br>
<br>Methods with the same name in a class are called overloaded methods. Overloading methods offers no specific benefit to the JVM but it is useful to the programmer to have several methods do the same things but with different parameters. For example, we may have the operation runAroundThe represented as two methods with the same name, but different input parameter types:<br>
<br>
Code section 4.22: Method overloading.


1 public void runAroundThe(Building block) {
2   ...
3 }
4 
5 public void runAroundThe(Park park) {
6   ...
7 }


<br>One type can be the subclass of the other:<br>
<br>

Code listing 4.11: ClassName.java


 1 public class ClassName {
 2 
 3   public static void sayClassName(Object aObject) {
 4     System.out.println("Object");
 5   }
 6 
 7   public static void sayClassName(String aString) {
 8     System.out.println("String");
 9   }
10 
11   public static void main(String[] args) {
12     String aString = new String();
13     sayClassName(aString);
14 
15     Object aObject = new String();
16     sayClassName(aObject);
17   }
18 }





Console for Code listing 4.11

String
Object


<br>Although both methods would be fit to call the method with the String parameter, it is the method with the nearest type that will be called instead. To be more accurate, it will call the method whose parameter type is a subclass of the parameter type of the other method. So, aObject will output Object. Beware! The parameter type is defined by the declared type of an object, not its instantiated type!<br>
<br>The following two method definitions are valid<br>
<br>
Code section 4.23: Method overloading with the type order.


1 public void logIt(String param, Error err) {
2   ...
3 }
4 
5 public void logIt(Error err, String param) {
6   ...
7 }


<br>because the type order is different. If both input parameters were type String, that would be a problem since the compiler would not be able to distinguish between the two:<br>
<br>
Code section 4.24: Bad method overloading.


1 public void logIt(String param, String err) {
2   ...
3 }
4 
5 public void logIt(String err, String param) {
6   ...
7 }


<br>The compiler would give an error for the following method definitions as well:<br>
<br>
Code section 4.25: Another bad method overloading.


1 public void logIt(String param) {
2   ...
3 }
4 
5 public String logIt(String param) {
6   String retValue;
7   ...
8   return retValue;
9 }


<br>Note, the return type is not part of the unique signature. Why not? The reason is that a method can be called without assigning its return value to a variable. This feature came from C and C++. So for the call:<br>
<br>
Code section 4.26: Ambiguous method call.


1 logIt(msg);


<br>the compiler would not know which method to call. It is also the case for the thrown exceptions.<br>
<br>
Test your knowledge

Question 4.6: Which methods of the Question6 class will cause compile errors?

Question6.java


 1 public class Question6 {
 2  
 3   public void example1() {
 4   }
 5 
 6   public int example1() {
 7   }
 8 
 9   public void example2(int x) {
10   }
11 
12   public void example2(int y) {
13   }
14 
15   private void example3() {
16   }
17 
18   public void example3() {
19   }
20 
21   public String example4(int x) {
22     return null;
23   }
24 
25   public String example4() {
26     return null;
27   }
28 }



Answer


Question6.java


 1 public class Question6 {
 2  
 3   public void example1() {
 4   }
 5 
 6   public int example1() {
 7   }
 8 
 9   public void example2(int x) {
10   }
11 
12   public void example2(int y) {
13   }
14 
15   private void example3() {
16   }
17 
18   public void example3() {
19   }
20 
21   public String example4(int x) {
22     return null;
23   }
24 
25   public String example4() {
26     return null;
27   }
28 }


The example1, example2 and example3 methods will cause compile errors. The example1 methods cannot co-exist because they have the same signature (remember, return type is not part of the signature). The example2 methods cannot co-exist because the names of the parameters are not part of the signature. The example3 methods cannot co-exist because the visibility of the methods are not part of the signature. The example4 methods can co-exist, because they have different method signatures.



<br>
<br>
<br>Instead of overloading, you can use a dynamic number of arguments. After the last parameter, you can pass optional unlimited parameters of the same type. These parameters are defined by adding a last parameter and adding ... after its type. The dynamic arguments will be received as an array:<br>
<br>
Code section 4.27: Variable argument.


 1   public void registerPersonInAgenda(String firstName, String lastName, Date... meeting) {
 2     String[] person = {firstName, lastName};
 3     lastPosition = lastPosition + 1;
 4     contactArray[lastPosition] = person;
 5 
 6     if (meeting.length > 0) {
 7       Date[] temporaryMeetings = registeredMeetings.length + meeting.length;
 8       for (i = 0; i < registeredMeetings.length; i++) {
 9         temporaryMeetings[i] = registeredMeetings[i];
10       }
11       for (i = 0; i < meeting.length; i++) {
12         temporaryMeetings[registeredMeetings.length + i] = meeting[i];
13       }
14       registeredMeetings = temporaryMeetings;
15     }
16   }


<br>The above method can be called with a dynamic number of arguments, for example:<br>
<br>
Code section 4.27: Constructor calls.


1 registerPersonInAgenda("John", "Doe");
2 registerPersonInAgenda("Mark", "Lee", new Date(), new Date());


<br>This feature was not available before Java 1.5 .<br>
<br>
<br>The constructor can be overloaded. You can define more than one constructor with different parameters. For example:<br>
<br>
Code listing 4.12: Constructors.


 1 public class MyClass {
 2 
 3   private String memberField;
 4  
 5   /**
 6    * MyClass Constructor, there is no input parameter
 7    */
 8   public MyClass() {
 9      ...
10   }
11  
12   /**
13    * MyClass Constructor, there is one input parameter
14    */
15    public MyClass(String param1) {
16      memberField = param1;
17      ...
18   }
19 }


<br>In the code listing 4.12, we defined two constructors, one with no input parameter, and one with one input parameter. You may ask which constructor will be called. Its depends how the object is created with the new keyword. See below:<br>
<br>
Code section 4.29: Constructor calls.


1 // The constructor with no input parameter will be called
2 MyClass obj1 = new MyClass();
3 
4 // The constructor with one input param. will be called
5 MyClass obj2 = new MyClass("Init Value");


<br>In the code section 4.29, we created two objects from the same class, or we can also say that obj1 and obj2 both have the same type. The difference between the two is that in the first one the memberField field is not initialized, in the second one that is initialized to "Init Value". A constructor may also be called from another constructor, see below:<br>
<br>
Code listing 4.13: Constructor pooling.


 1 public class MyClass {
 2 
 3   private String memberField;
 4  
 5   /**
 6    * MyClass Constructor, there is no input parameter
 7    */
 8   public MyClass() {
 9     MyClass("Default Value");
10   }
11  
12   /**
13    * MyClass Constructor, there is one input parameter
14    */
15   public MyClass(String param1) {
16     memberField = param1;
17     ...
18   }
19 }


<br>In the code listing 4.13, the constructor with no input parameter calls the other constructor with the default initial value. This call must be the first instruction of a constructor or else a compiler error will occur. The code gives an option to the user, to create the object with the default value or create the object with a specified value. The first constructor could have been written using the this keyword as well:<br>
<br>
Code section 4.30: Another constructor pooling.


1   public MyClass() {
2     this("Default Value");
3   }


<br>Such a call reduces the code repetition.<br>
<br>