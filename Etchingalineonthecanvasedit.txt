 <br>
<br> TOC
Java ProgrammingDrawing shapes
Drawing complex shapes 
<br>Navigate User Interface topic:( v • d • e )
 Basic I/O
 Streams
 Event handling
 JavaBeans
 Canvas
 Graphics
 Drawing basic shapes
 Drawing complex shapes
 Drawing text
 Understanding gradients

 Applets

 Overview
 User Interface
 Event Listeners
 Graphics and Media



<br><br>
<br>
<br>Throughout this chapter, we will refer to the process of creating Graphical content with code as either drawing or painting. However, Java officially recognizes the latter as the proper word for the process, but we will differentiate between the two later on.<br>
<br>Now, the main class that you would be needing would, without doubt, be the Graphics class. If you take a closer look at the method that we used in theIdentifying the acquisition of the Graphics class in our code<br>
<br>
Code listing 9.3: A basic canvas


import java.awt.*;
import javax.swing.*;
public class MyCanvas extends Canvas {
    public MyCanvas() {
    }

    public void paint(Graphics graphics) {
        /* We would be using this method only for the sake
         * of brevity throughout the current section. Note
         * that the Graphics class has been acquired along
         * with the method that we overrode. */
    }

    public static void main(String[] args) {
        MyCanvas canvas = new MyCanvas();
        JFrame frame = new JFrame();
        frame.setSize(400, 400);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.getContentPane().add(canvas);
        frame.setVisible(true);
    }
}


<br>To view the contents of the Graphics class, please check the external links at the bottom of the page for links to the online API.<br>
<br>
<br>Understanding coordinates[edit]<br>
<br>To start off your drawing experience, consider drawing the most basic shape — a line. A canvas when viewed upon with regards to drawing routines can be expressed as an inverted Cartesian coordinate system. A plane expressed by an x- and a y-axis. The origin point or (0,0){\displaystyle (0,0)} being the top-left corner of a canvas and the visible area of the canvas being the Cartesian quadrant I or the positive-positive (+,+) quadrant. The further you go down from the top, the greater the value of y-coordinate on the y-axis, vice-versa for the x-axis as you move toward the right from the left. And unlike the values on a normal graph, the values appear to be positive. So a point at (10,20){\displaystyle (10,20)} would be 10 pixels away from the left and 20 pixels away from the top, hence the format (x,y){\displaystyle (x,y)}.<br>
<br>



Figure 9.2: A simple line form displayed across the canvas from Code section 9.4

<br>
<br>Drawing a simple line across the screen[edit]<br>
<br>Now, we already know that a line is a connection of two discreet points atop a canvas. So, if one point is at (x1,y1){\displaystyle (x1,y1)} and the other is at (x2,y2){\displaystyle (x2,y2)}, drawing a line would require you to write a syntax like code below. For the sake of brevity, we will skim out the rest of the method unused in the example.<br>
<br>
Code section 9.4: Drawing a simple line form


...
public class MyCanvas extends Canvas {
    ...
    public void paint(Graphics graphics) {
        graphics.setColor(Color.black);
        graphics.drawLine(40, 30, 330, 380);
        
    }
    ...
}


<br>In the above example, a simple method is used to define precisely where to place the line on the Cartesian scale of the canvas. The drawLine(int,int,int,int) asks you to put four arguments, appearing in order, the x1 coordinate, the y1 coordinate, the x2 coordinate and the y2 coordinate. Running the program will show a simple black line diagonally going across the canvas.<br>
<br>



Figure 9.3: A simple black-outlined rectangle drawn

<br>
<br>